generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["typedSql"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        Int      @id @default(autoincrement())
    email     String   @unique @db.VarChar(255)
    password  String   @db.VarChar(255)
    username  String?  @unique
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

    Profile                 Profile?
    SenderDirectChats       DirectChat[]    @relation("CreatorOnDirectChats")
    RecipientDirectChats    DirectChat[]    @relation("RecipientOnDirectChats")
    GroupMessages           GroupMessage[]  @relation("AuthorOnMessages")
    DirectMessages          DirectMessage[] @relation("AuthorOnMessages")
    FriendRecipients        Friend[]        @relation("RecipientOnFriends")
    FriendSenders           Friend[]        @relation("SenderOnFriends")
    SenderFriendRequests    FriendRequest[] @relation("SenderOnFriendRequests")
    RecipientFriendRequests FriendRequest[] @relation("RecipientOnFriendRequests")

    @@map("users")
}

model Profile {
    id        Int       @id @default(autoincrement())
    fullName  String    @map("full_name") @db.VarChar(255)
    birthday  DateTime? @db.Date
    about     String?
    avatar    String?
    userId    Int       @unique @map("user_id")
    createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)

    User User @relation(fields: [userId], references: [id])

    @@map("profiles")
}

model DirectChat {
    id          Int      @id @default(autoincrement())
    creatorId   Int      @map("creator_id")
    recipientId Int      @map("recipient_id")
    createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

    Recipient      User            @relation("RecipientOnDirectChats", fields: [recipientId], references: [id])
    Creator        User            @relation("CreatorOnDirectChats", fields: [creatorId], references: [id])
    DirectMessages DirectMessage[] @relation("MessagesOnDirectChat")

    @@unique([creatorId, recipientId])
    @@map("direct_chats")
}

model DirectMessage {
    id           Int               @id @default(autoincrement())
    content      String
    authorId     Int               @map("author_id")
    directChatId Int               @map("direct_chat_id")
    status       MessageStatusEnum @map("status")
    createdAt    DateTime          @default(now()) @map("created_at") @db.Timestamptz(3)

    DirectChat DirectChat @relation("MessagesOnDirectChat", fields: [directChatId], references: [id])
    Author     User       @relation("AuthorOnMessages", fields: [authorId], references: [id])

    @@unique([directChatId, createdAt])
    @@index(fields: [createdAt(sort: Desc), directChatId], type: BTree)
    @@map("direct_messages")
}

model GroupMessage {
    id          Int      @id @default(autoincrement())
    content     String
    authorId    Int      @map("author_id")
    groupChatId Int      @map("group_chat_id")
    createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

    GroupChat GroupChat @relation("MessagesOnGroupChat", fields: [groupChatId], references: [id])
    Author    User      @relation("AuthorOnMessages", fields: [authorId], references: [id])

    @@unique([groupChatId, createdAt])
    @@index(fields: [createdAt(sort: Desc), groupChatId], type: BTree)
    @@map("group_messages")
}

model Friend {
    id          Int      @id @default(autoincrement())
    recipientId Int      @map("recipient_id")
    senderId    Int      @map("sender_id")
    createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

    Recipient User @relation("RecipientOnFriends", fields: [recipientId], references: [id])
    Sender    User @relation("SenderOnFriends", fields: [senderId], references: [id])

    @@map("friends")
}

model FriendRequest {
    id          Int                  @id @default(autoincrement())
    senderId    Int                  @map("sender_id")
    recipientId Int                  @map("recipient_id")
    status      FriendRequestsStatus
    createdAt   DateTime             @default(now()) @map("created_at") @db.Timestamptz(3)
    updatedAt   DateTime             @default(now()) @map("updated_at") @db.Timestamptz(3)

    Sender    User @relation("SenderOnFriendRequests", fields: [senderId], references: [id])
    Recipient User @relation("RecipientOnFriendRequests", fields: [recipientId], references: [id])

    @@unique([senderId, recipientId, status])
    @@map("friend_requests")
}

model GroupChat {
    id        Int      @id @default(autoincrement())
    name      String?  @db.VarChar(255)
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

    GroupMessages GroupMessage[] @relation("MessagesOnGroupChat")

    @@map("group_chats")
}

enum FriendRequestsStatus {
    PENDING
    ACCEPTED
    REJECTED
}

enum MessageStatusEnum {
    SENT
    SEEN
}
